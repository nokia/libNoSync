// This file is part of libnosync library. See LICENSE file for license details.
#ifndef NOSYNC__TIME_LIMITED_BYTES_READER_H
#define NOSYNC__TIME_LIMITED_BYTES_READER_H

#include <chrono>
#include <nosync/bytes-reader.h>
#include <nosync/eclock.h>
#include <nosync/event-loop.h>
#include <memory>


namespace nosync
{

/*!
Create bytes_reader decorator which sets absolute time limit on reads.

The generated bytes_reader which sets time limit (as absolute time point) on
read operations. It provides convenient mechanism for ensuring that a group of
read operations performed by different and possibly unrelated parts of code fits
in required time limit.

This reader will pass all read requests to the underlying bytes_reader
implementation with possibly modified timeout value such that it never exceeds
(when added to current etime) past the time limit. When the time moves past the
limit, all request are forwarded with timeout set to zero.
*/
std::shared_ptr<bytes_reader> make_time_limited_bytes_reader(
    event_loop &evloop, std::chrono::time_point<eclock> timeout_end,
    std::shared_ptr<bytes_reader> &&base_reader);

}

#endif /* NOSYNC__TIME_LIMITED_BYTES_READER_H */
