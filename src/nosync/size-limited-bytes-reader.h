// This file is part of libnosync library. See LICENSE file for license details.
#ifndef NOSYNC__SIZE_LIMITED_BYTES_READER_H
#define NOSYNC__SIZE_LIMITED_BYTES_READER_H

#include <nosync/bytes-reader.h>
#include <nosync/event-loop.h>
#include <memory>


namespace nosync
{

/*!
Create bytes_reader decorator which limits total number of read bytes.

The generated bytes_reader limits total amount of data read from the underlying
base_reader. Once the limit is reached, each read request with non-zero maximum
size will produce result with error set to errc::file_too_large.

Until the limit is reached, all non-zero read requests are passed to the the
underlying bytes_reader implementation, possibly with modified max_size and
timeout parameters. In order to be able to guarantee that no data above the
limit is ever read, the decorator may perform some reads sequentially, even if
the original reads were not sequential.
*/
std::shared_ptr<bytes_reader> make_size_limited_bytes_reader(
    event_loop &evloop, std::size_t total_size_limit, std::shared_ptr<bytes_reader> &&base_reader);

}

#endif /* NOSYNC__SIZE_LIMITED_BYTES_READER_H */
